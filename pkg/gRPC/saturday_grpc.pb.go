// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: saturday.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaturdayServiceClient is the client API for SaturdayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaturdayServiceClient interface {
	// Control the crawler
	StartCrawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
	StopCrawl(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	GetCrawlStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Search functionality
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type saturdayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaturdayServiceClient(cc grpc.ClientConnInterface) SaturdayServiceClient {
	return &saturdayServiceClient{cc}
}

func (c *saturdayServiceClient) StartCrawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := c.cc.Invoke(ctx, "/saturday.SaturdayService/StartCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saturdayServiceClient) StopCrawl(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/saturday.SaturdayService/StopCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saturdayServiceClient) GetCrawlStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/saturday.SaturdayService/GetCrawlStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saturdayServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/saturday.SaturdayService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaturdayServiceServer is the server API for SaturdayService service.
// All implementations must embed UnimplementedSaturdayServiceServer
// for forward compatibility
type SaturdayServiceServer interface {
	// Control the crawler
	StartCrawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
	StopCrawl(context.Context, *StopRequest) (*StopResponse, error)
	GetCrawlStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Search functionality
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedSaturdayServiceServer()
}

// UnimplementedSaturdayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaturdayServiceServer struct {
}

func (UnimplementedSaturdayServiceServer) StartCrawl(context.Context, *CrawlRequest) (*CrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCrawl not implemented")
}
func (UnimplementedSaturdayServiceServer) StopCrawl(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCrawl not implemented")
}
func (UnimplementedSaturdayServiceServer) GetCrawlStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrawlStatus not implemented")
}
func (UnimplementedSaturdayServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSaturdayServiceServer) mustEmbedUnimplementedSaturdayServiceServer() {}

// UnsafeSaturdayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaturdayServiceServer will
// result in compilation errors.
type UnsafeSaturdayServiceServer interface {
	mustEmbedUnimplementedSaturdayServiceServer()
}

func RegisterSaturdayServiceServer(s grpc.ServiceRegistrar, srv SaturdayServiceServer) {
	s.RegisterService(&SaturdayService_ServiceDesc, srv)
}

func _SaturdayService_StartCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaturdayServiceServer).StartCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saturday.SaturdayService/StartCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaturdayServiceServer).StartCrawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaturdayService_StopCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaturdayServiceServer).StopCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saturday.SaturdayService/StopCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaturdayServiceServer).StopCrawl(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaturdayService_GetCrawlStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaturdayServiceServer).GetCrawlStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saturday.SaturdayService/GetCrawlStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaturdayServiceServer).GetCrawlStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaturdayService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaturdayServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saturday.SaturdayService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaturdayServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaturdayService_ServiceDesc is the grpc.ServiceDesc for SaturdayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaturdayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saturday.SaturdayService",
	HandlerType: (*SaturdayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCrawl",
			Handler:    _SaturdayService_StartCrawl_Handler,
		},
		{
			MethodName: "StopCrawl",
			Handler:    _SaturdayService_StopCrawl_Handler,
		},
		{
			MethodName: "GetCrawlStatus",
			Handler:    _SaturdayService_GetCrawlStatus_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SaturdayService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saturday.proto",
}
