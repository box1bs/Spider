// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: spider.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpiderServiceClient is the client API for SpiderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpiderServiceClient interface {
	// Control the crawler
	StartCrawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
	StopCrawl(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	GetCrawlStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Search functionality
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type spiderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiderServiceClient(cc grpc.ClientConnInterface) SpiderServiceClient {
	return &spiderServiceClient{cc}
}

func (c *spiderServiceClient) StartCrawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderService/StartCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderServiceClient) StopCrawl(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderService/StopCrawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderServiceClient) GetCrawlStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderService/GetCrawlStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiderServiceServer is the server API for SpiderService service.
// All implementations must embed UnimplementedSpiderServiceServer
// for forward compatibility
type SpiderServiceServer interface {
	// Control the crawler
	StartCrawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
	StopCrawl(context.Context, *StopRequest) (*StopResponse, error)
	GetCrawlStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Search functionality
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedSpiderServiceServer()
}

// UnimplementedSpiderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpiderServiceServer struct {
}

func (UnimplementedSpiderServiceServer) StartCrawl(context.Context, *CrawlRequest) (*CrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCrawl not implemented")
}
func (UnimplementedSpiderServiceServer) StopCrawl(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCrawl not implemented")
}
func (UnimplementedSpiderServiceServer) GetCrawlStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrawlStatus not implemented")
}
func (UnimplementedSpiderServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSpiderServiceServer) mustEmbedUnimplementedSpiderServiceServer() {}

// UnsafeSpiderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpiderServiceServer will
// result in compilation errors.
type UnsafeSpiderServiceServer interface {
	mustEmbedUnimplementedSpiderServiceServer()
}

func RegisterSpiderServiceServer(s grpc.ServiceRegistrar, srv SpiderServiceServer) {
	s.RegisterService(&SpiderService_ServiceDesc, srv)
}

func _SpiderService_StartCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServiceServer).StartCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderService/StartCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServiceServer).StartCrawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiderService_StopCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServiceServer).StopCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderService/StopCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServiceServer).StopCrawl(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiderService_GetCrawlStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServiceServer).GetCrawlStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderService/GetCrawlStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServiceServer).GetCrawlStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiderService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpiderService_ServiceDesc is the grpc.ServiceDesc for SpiderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpiderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spider.SpiderService",
	HandlerType: (*SpiderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCrawl",
			Handler:    _SpiderService_StartCrawl_Handler,
		},
		{
			MethodName: "StopCrawl",
			Handler:    _SpiderService_StopCrawl_Handler,
		},
		{
			MethodName: "GetCrawlStatus",
			Handler:    _SpiderService_GetCrawlStatus_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SpiderService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spider.proto",
}
